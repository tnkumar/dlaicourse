import tensorflow as tf

# YOUR CODE SHOULD START HERE                                  *** This class definition needs to be after import as tf functions are used here
class myCallback(tf.keras.callbacks.Callback):                 *** A class is defined based on keras callbacks and a function on_epoch_end customized when acc > .99
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('acc')>0.99):                                  *** Error 2 was - stating accuracy instead of acc - Error 1 was - doing the class definition inside the function   
      print("\nReached 99% accuracy so cancelling training!")
      self.model.stop_training = True
# YOUR CODE SHOULD END HERE

mnist = tf.keras.datasets.mnist                                *** dataset is specified

(x_train, y_train),(x_test, y_test) = mnist.load_data()        *** train and test data loaded
# YOUR CODE SHOULD START HERE
x_train, x_test = x_train / 255.0, x_test / 255.0              *** data normalized
callbacks = myCallback()                                       *** An object of the personalized class instantiated
# YOUR CODE SHOULD END HERE
model = tf.keras.models.Sequential([
# YOUR CODE SHOULD START HERE
    tf.keras.layers.Flatten(input_shape=(28,28)),
    tf.keras.layers.Dense(512, activation=tf.nn.relu),
    tf.keras.layers.Dense(10, activation=tf.nn.softmax)
# YOUR CODE SHOULD END HERE
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# YOUR CODE SHOULD START HERE
model.fit(x_train, y_train, epochs=10, callbacks=[callbacks]) *** When fitting, the object callbacks is passed as a parameter
# YOUR CODE SHOULD END HERE
